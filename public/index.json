
[{"content":"This section contains all my blog articles!\n","date":"18 April 2025","externalUrl":null,"permalink":"/blog/","section":"Blog","summary":"","title":"Blog","type":"blog"},{"content":"\rIntroduction #\rBrute-force alerts were a hefty task for me when I first started my job as a SOC Analyst. At the time, the triage process was entirely manual, which made it rather resource-intensive and time-consuming. In my eyes this approach was not an efficient use of time, so I took the initiative to automate it. I created two separate scripts - one took the generated log and used AbuseIPDB\u0026rsquo;s API to scan the IP addresses, while the other checked if they were already blocked within our environment.\nScripts #\rAbuseIPDB Checker #\rThe first script is used to automatically grab IP addresses from the log and check them using the AbuseIPDB API. The script takes a CSV file with the logs and filters all of the data to extract only valid IP addresses using RegEx. The script also sorts through duplicates and returns only unique entries.\n# Function to validate IP addresses function Validate-IP { param ( [string]$IP ) # Regular expression for validating an IP address (IPv4) $regex = \u0026#39;^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\u0026#39; return $IP -match $regex } # Read the CSV file $csvData = Import-Csv -Path $inputFile # Extract valid IPs from the CSV $ipAddresses = $csvData | ForEach-Object { $_.PSObject.Properties.Value | ForEach-Object { $ip = $_ if (Validate-IP -IP $ip -and $ip -notmatch \u0026#39;^\\d+$\u0026#39;) { $ip } } } | Sort-Object -Unique The user also has to provide an output file which defaults to XLSX format. They also have an option to provide Abuse score threshold (-t), minimum days of retained reports (-md), or display the user manual (-help) if required.\nNote: The default threshold is set to 20% and the timeline of the fetched reports is 30 days.\rThe script utilises the API to obtain the IP Address, Confidence Score, ISP, Usage Type, Location, Total Reports, and potential Tor Node identification. The script shows appropriate errors to help with troubleshooting if any issues occur.\nFinally, it exports the results to Excel and has the functionality to overwrite files with the same name. If no IPs with Abuse Score over the threshold was found, an Excel sheet is not generated and the script displays a message.\nThe full script can be found on my GitHub Page.\nBlocklist Checker #\rThe second script is made specifically for a blocklist accessible through a URL but it can be altered to suit the user\u0026rsquo;s needs. The user has the following options:\n-i: Input file -o: Output file (optional, otherwise results will be displayed in the command line) -e: Specify if it should expect an Excel sheet. No flag is needed if the IPs are in a .txt file. -r: Displays unique IPs with semi-colon as a delimiter. Note: The -e flag is made to work with Excel sheets created by the former script. Some changes to the script will be necessary if your Excel sheets have a different layout.\rThe functionality is simple - it iterates through all the provided IPs and checks if they are present within the blocklist. Any missing addresses will be provided to the user so they can be promptly blocked.\nThe full script can be found on my GitHub Page.\n","date":"18 April 2025","externalUrl":null,"permalink":"/blog/miscellaneous/ip-block-automation/","section":"Blog","summary":"","title":"IP Block Automation","type":"blog"},{"content":"Welcome to my website! I will use this website as a blog to document my research and analysis into various malware samples and how they affect systems. The papers I will include in the blog pages will contain thorough analysis of the samples and a forensic investigation into the effects it has on the affected machines.\nI have also included links to my accounts on various platforms such as LinkedIn, Github, and TryHackMe!\n- Kyd1ct\n","date":"18 April 2025","externalUrl":null,"permalink":"/","section":"kyd1ct.dev","summary":"","title":"kyd1ct.dev","type":"page"},{"content":"This section contains all articles related to automation and other personal projects that don\u0026rsquo;t fall under CTFs or Malware Analysis!\n","date":"18 April 2025","externalUrl":null,"permalink":"/blog/miscellaneous/","section":"Blog","summary":"","title":"Miscellaneous","type":"blog"},{"content":"\rIntroduction #\rBack in September 2024, BSides St. Petersburg took place. A friend of mine hosted the CTF and asked me if I wanted to participate by creating a few challenges. I ended up creating two forensics-based CTF challenges.\nCache Me If You Can This challenge highlights the complexity of Windows RAM data and teaches participants how much information can be extracted using memory forensics. By working through this task, players will dive into tools like Volatility to uncover hidden data within volatile memory. Greg\u0026rsquo;s Cryptic Thumbs-Up A multi-layered steganography challenge where players must find a hidden link within a GIF, which leads to a PDF file containing another concealed message. This exercise pushes participants to think outside the box and explore different techniques for uncovering hidden information within files. Challenges #\rCache Me If You Can #\rAs mentioned, this challenge focused on RAM forensics and aimed to teach the participants about how valuable volatile data can be for an investigation. I decided to focus on the following:\nSplit the flag in two halves and hide them in separate places. Encourage creativity - I used a variety of file names and tools to insert the data in memory. Environmental variables. Web browser history. Encryption of the flag. I started by creating a long flag. I first encoded it in Base64, then encrypted it using AES. The result was split in two halves.\nAfter the flag halves were done, I booted my VM and created multiple files - Notepad, Notepad++, vim. I opened them together with some other files in an attempt to trick the users. One of the files was named with the first half of the flag, while the other two contained either hints, or added as a deception.\nAfter this part was done, I grabbed the key used during the encryption, split it in half again, and added two separate environmental variables.\nThe second half of the flag was located within a PasteBin link and the participants had to extract it from a Google Chrome process dump. I opened multiple links to make it trickier for the participants if they did not consider looking for PasteBin.\nOnce the AES key and both halves of the flag were identified, the participants could use CyberChef to decrypt it and win the challenge.\nThe challenge can be accessed in my GitHub page, together with a full walkthrough.\nGreg\u0026rsquo;s Cryptic Thumbs-Up #\rThis challenge featured multi-layer steganography, attempting to challenge and trick the users. I decided to focus on the following:\nHide data within a GIF. GIF leads to a PDF with a hidden message - maybe it was \u0026ldquo;printed\u0026rdquo;? Decode the hidden message by hand or by using a toolkit. The idea of this challenge was to be simple, yet pose a challenge to users who have not previously dealt with printer dots.\nAs mentioned, the first part of the challenge was hidden data within a GIF. I split the GIF into frames and edited parts of a link (split into 4 parts) into those frames. The colour of the text was purposefully made to blend into the background. This to examine it frame by frame to obtain the link.\nThe link lead to a PDF file with a hidden message. Once the participants zoomed in, they could see the tiny dots that printers usually include. The dots were placed on the PDF using the Deda Toolkit. Participants could use the same toolkit to decode the data, or they could do it by hand if they had enough experience. The message hiddin in the dots contained the flag which consisted of date, time, and a serial number - information which is included by printers on each sheet of paper.\nOnce again, the challenge can be accessed in my GitHub page together with a full walkthrough.\n","date":"24 October 2024","externalUrl":null,"permalink":"/blog/ctf/stpete24-ctf/","section":"Blog","summary":"","title":"BSides STPete24","type":"blog"},{"content":"This section contains all my CTF articles!\n","date":"24 October 2024","externalUrl":null,"permalink":"/blog/ctf/","section":"Blog","summary":"","title":"CTFs","type":"blog"},{"content":"This section contains all my malware analysis articles!\n","date":"24 October 2024","externalUrl":null,"permalink":"/blog/malware/","section":"Blog","summary":"","title":"Malware Analysis","type":"blog"},{"content":"Recently, a fake game called StarsVaders started circulating on Discord. Similar to other malware on that platform, it aims to trick users into downloading malware instead of an actual game. This malware\u0026rsquo;s real goal is to steal information like browser history, tokens, and other personal data.\nIn this article, we’ll break down how StarsVaders works, including:\nStatic Analysis: Looking at the file properties and hidden details that reveal it’s not a real game.\nDynamic Analysis: Running StarsVaders in a test environment to see what it tries to do on the system.\nAlong the way, we’ll use tools like FlareVM, VirusTotal, and Hybrid Analysis to help us uncover the true nature of this fake game.\nBy the end, you’ll see how attackers hide malware in plain sight—and how to spot it.\nDiscovery #\rThe phishing link was obtained through a friend, who mentioned the scam in a mutual Discord server. The messages were sent by a friend of theirs but they seemed suspicious. I asked them for the link and started with the analysis.\nI first checked the website in VirusTotal, who.is, and URLScan and saw that the it was marked as malicious by a few vendors. The domain was created in September 2024, which indicated potential suspicious activity.\nWhen I opened the website on my VM, I noticed a large \u0026ldquo;Download\u0026rdquo; button on top of the page. It also had various screenshots of the alleged game. I looked into this and identified that they used images from a game called The Braves while the malware was attempting to impersonate an upcoming game called StarVaders.\nThe previously mentioned \u0026ldquo;Download\u0026rdquo; button utilised Discord\u0026rsquo;s CDN to host and spread the malicious file. The attackers used this as it looks benign due to gamers being very familiar with Discord. This also makes it easier for the adversary as they do not need to spin up any extra infrastructure to spread the files.\nAnalysis #\rStatic Analysis #\rAfter downloading the archive, I opened it and found an executable within it. I attempted to extract it, but the archive required a password to complete the extraction. I would assume the attackers provided the password to the victims. I had no such luck as my friend did not fall for the phishing attempt.\nI decided to use John The Ripper\u0026rsquo;s module called zip2john which is used for password protected zip files. Thankfully, the password was within the rockyou.txt password dictionary file. The password was revealed to be beta.\nI used FLOSS to extract strings from the file in order to obtain an initial understanding of its capabilities. FLOSS is a great too for such tasks as it can identify obfuscation and attempt to make it human-readable. In this case, since the file was too big, FLOSS essentially worked as the Linux binary strings. Observing the output indicated that the file is capable of manipulating the user\u0026rsquo;s clipboard and registries.\nRunning the installer dropped multiple other binaries. FLOSS showed similar results on the other files.\nDynamic Analysis #\rAs mentioned, the installer dropped more binaries. The files were located in the following directories:\nAppData\\Local\\starsvaders-updater AppData\\Local\\Programs\\StarsVaders The former directory contained one file named installer.exe. The file was identical to the initial installer StarsVaders Setup 2.0.0.exe which would indicate attempts at persistence. I, however, could not identify any indicators of persistence within the registries and/or scheduled tasks.\nThe other location featured more files:\nStarsVaders.exe - main executable. Uninstall StarsVaders.exe - alleged uninstaller. Chrome/Chromium-related files. Electron-related files. elevate.exe - within the resources directory. The main executable, StarsVaders.exe, contained the main functionality of the malware. It attempted to steal data from the user\u0026rsquo;s browser (cookies, history, etc.). It also attempted to access files within the Discord directories within AppData. The files covered all versions of Discord (Discord, Canary, PTB, Development) and even the custom version of the application called BetterDiscord. Examining the process tree showed that StarsVaders.exe ran two commands multiple times:\npowershell.exe /c \u0026#34;Get-CimInstance -className win32_process | select Name,ProcessId,ParentProcessId,CommandLine,ExecutablePath\u0026#34; C:\\Windows\\system32\\cmd.exe /d /s /c \u0026#34;powershell -Command \u0026#34;\u0026amp; {Add-Type -AssemblyName System.Windows.Forms; [System.Windows.Forms.MessageBox]::Show(\u0026#39;The application was unable to start correctly (0xc000007b). Click OK to close the application.\u0026#39;, \u0026#39;Application Error\u0026#39;, [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)}\u0026#34;\u0026#34; The former command functions similarly to pstree, while the latter shows a fake error message to trick the victim.\nThe uninstaller removed the files from the main directory but the installer within AppData\\Local\\starsvaders-updater remained.\nThe final file of interest, elevate.exe, is a file used by Electron applications. It does what the name suggests - it elevates the application\u0026rsquo;s privileges, providing it with higher access to the OS.\nFinally, I decided to test how the application exfiltrates the obtained data. I did this by running inetsim and wireshark on a Linux VM and placing both VMs on the same Host-Only network adapter. The malware did not appear to download any additional payloads but it made a connection to a URL called unity-api[.]net. I could not directly access the domain due to CloudFlare blocking my attempts. This prevents me from further researching the malware\u0026rsquo;s capabilities. While this URL might look benign, VirusTotal and who.is indicated that it was created on the 31st of August. It would highly unlikely that Unity are hosting their API on a nearly brand-new domain.\nConclusion #\rAfter the analysis, I gathered all of the evidence and reported the URLs to the providers which were used to host the websites/servers.\nAs of today, the archive file from the Discord CDN is unavailable. IoCs #\rLinks #\rwww.starsvaders[.]com - VirusTotal\nunity-api[.]net - VirusTotal\nHashes #\rStarsVaders Setup 2.0.0.exe ea2b7e73659c251243f33999c5b0e12bf6c180f44ff545a02acb7164eda8cd83 StarsVaders.exe\n4d05d719f2af8bcb4e706d7b01ed54739fc63dd20579b17ef34c78e9a2e57a6e StarsVaders.rar\n9532a0f831316fd17b4089afc87950c472ab8ed5b58e0b2765d1d4fe8557557e Uninstall StarsVaders.exe\n47b6d08004a15d0bc8ac07f1a03d487cf287203e71024d438b2f503017ef8e6a elevate.exe\n9b1fbf0c11c520ae714af8aa9af12cfd48503eedecd7398d8992ee94d1b4dc37 installer.exe ea2b7e73659c251243f33999c5b0e12bf6c180f44ff545a02acb7164eda8cd83\n","date":"24 October 2024","externalUrl":null,"permalink":"/blog/malware/starsvaders-discord-malware/","section":"Blog","summary":"","title":"StarsVaders or Spyware?","type":"blog"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]